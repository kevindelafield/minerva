cmake_minimum_required(VERSION 2.4)
project(ovhttpd)
cmake_policy(SET CMP0003 NEW)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

include_directories(../thirdparty/oryx/include ../thirdparty/oryx/include/utility ../thirdparty/oryx/include/ipc ../thirdparty/oryx/include/services ../thirdparty/oryx/include/utility/drawing ../thirdparty/oryx/include/video ../thirdparty/oryx/include/vca ../thirdparty/alsa/include ../thirdparty/amba-arm/include)

IF (AARCH_TOOLCHAIN_DIR)
  
  SET(CMAKE_CXX_FLAGS "-Werror")

  include_directories(../thirdparty/alsa/include ../thirdparty/pugixml-arm/include ../thirdparty/jsoncpp-arm/include ../thirdparty/uuid-arm/include ../thirdparty/curl-7.77.0-arm/include ../thirdparty/openssl-1.1.1k-arm/include)
  
  find_library(UUID_LIBRARY NO_DEFAULT_PATH NAMES uuid PATHS ../thirdparty/uuid-arm/lib )
  find_library(CURL_LIBRARY NO_DEFAULT_PATH NAMES curl PATHS ../thirdparty/curl-7.77.0-arm/lib)
  find_library(CRYPTO_LIBRARY NO_DEFAULT_PATH NAMES crypto PATHS ../thirdparty/openssl-1.1.1k-arm/lib)
  find_library(SSL_LIBRARY NO_DEFAULT_PATH NAMES ssl PATHS ../thirdparty/openssl-1.1.1k-arm/lib)
  find_library(NGHTTP2_LIBRARY NO_DEFAULT_PATH NAMES nghttp2 PATHS ../thirdparty/dependencies/arm/lib)
  find_library(IDN2_LIBRARY NO_DEFAULT_PATH NAMES idn2 PATHS ../thirdparty/dependencies/arm/lib)
  find_library(SSH2_LIBRARY NO_DEFAULT_PATH NAMES ssh2 PATHS ../thirdparty/dependencies/arm/lib)
  find_library(Z_LIBRARY NO_DEFAULT_PATH NAMES z PATHS ../thirdparty/dependencies/arm/lib)
  find_library(UNISTRING_LIBRARY NO_DEFAULT_PATH NAMES unistring PATHS ../thirdparty/dependencies/arm/lib)
  find_library(PUGIXML_LIBRARY NO_DEFAULT_PATH NAMES pugixml PATHS ../thirdparty/pugixml-arm/lib)
  find_library(JSONCPP_LIBRARY NO_DEFAULT_PATH NAMES jsoncpp PATHS ../thirdparty/jsoncpp-arm/lib)
  
  SET(CMAKE_C_COMPILER ${AARCH_TOOLCHAIN_DIR}/bin/aarch64-linux-gnu-gcc)
  SET(CMAKE_CXX_COMPILER ${AARCH_TOOLCHAIN_DIR}/bin/aarch64-linux-gnu-g++)
  SET(CMAKE_ASM_COMPILER ${AARCH_TOOLCHAIN_DIR}/bin/aarch64-linux-gnu-g++)
  SET(CMAKE_LINKER ${AARCH_TOOLCHAIN_DIR}/bin/aarch64-linux-gnu-ld)
  IF (DEBUG)
    SET(CMAKE_CXX_FLAGS_DEBUG "-O0")
    SET(CMAKE_C_FLAGS_DEBUG "-O0")
  ENDIF()
ELSE()

  SET(CMAKE_CXX_FLAGS "-fPIC -Werror")

  find_library(UUID_LIBRARY NAMES uuid)
  find_library(CURL_LIBRARY NAMES curl)
  find_library(CRYPTO_LIBRARY crypto)
  find_library(SSL_LIBRARY NAMES ssl)
  find_library(NGHTTP2_LIBRARY NAMES nghttp2)
  find_library(IDN2_LIBRARY NAMES idn2)
  find_library(SSH2_LIBRARY NAMES ssh2)
  find_library(Z_LIBRARY NAMES z)
  find_library(UNISTRING_LIBRARY unistring)
  find_library(JSONCPP_LIBRARY NAMES jsoncpp)
  find_library(PUGIXML_LIBRARY NAMES pugixml)
ENDIF() 

SET (CMAKE_CXX_CPPCHECK ${CMAKE_SOURCE_DIR}/../tools/runclang.sh "-std=c++17")
SET (CMAKE_C_CPPCHECK ${CMAKE_SOURCE_DIR}/../tools/runclang.sh)

include_directories(.)

include_directories(ovhttpd)
add_subdirectory(ovhttpd)

include_directories(snap)
add_subdirectory(snap)

include_directories(audio)
add_subdirectory(audio)

include_directories(chime)
add_subdirectory(chime)

include_directories(www)
add_subdirectory(www)

include_directories(wifi)
add_subdirectory(wifi)

include_directories(sensors)
add_subdirectory(sensors)

include_directories(sdr)
add_subdirectory(sdr)

include_directories(controls)
add_subdirectory(controls)

include_directories(util)
add_subdirectory(util)

include_directories(ddns)
add_subdirectory(ddns)

include_directories(ntp)
add_subdirectory(ntp)

include_directories(powerctrl)
add_subdirectory(powerctrl)

include_directories(health)
add_subdirectory(health)

include_directories(oryx)
add_subdirectory(oryx)

include_directories(test)
add_subdirectory(test)

